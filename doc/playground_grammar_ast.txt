# This grammar file has been modified to indicate what
# Elements of rules should be root nodes.
# Some rules use a re-write notation created for ANTLR
# The re-write allows you to discard unneeded lexical tokens

program: ^ statements ;

statements: ^ $STATEMENTS statement * ;

statement: ^ ( print_stat 
            | assign_stat 
            | expr_stat  
            | block_stat 
            | if_stat
            | while_stat 
            | func_def 
            | class_def )
            ; 

arg_list: bool_expr ? |
          bool_expr ( ',' bool_expr )+ 
          -> ^($ARG_LIST bool_expr * );


print_stat: 'print' '(' arg_list ? ')' ';'      -> ^( 'print' arg_list ? ) ;
assign_stat: NAME ('.' NAME)? '=' bool_expr ';' -> ^( '=' (NAME | '.' NAME NAME) bool_expr ) ; 
expr_stat:   bool_expr ';'                      -> ^( bool_expr ) ;
block_stat:  '{' statements '}'                 -> ^( statements ) ; 

if_stat:    ^ 'if'   bool_expr block_stat elif_stat ? else_stat ? ;
elif_stat:  ^ 'elif' bool_expr block_stat elif_stat * else_stat ? ;
else_stat:    'else' block_stat -> ^( block_stat );
while_stat: ^ 'while' bool_expr block_stat ;

func_def: 'def' NAME '(' id_list ')' block_stat -> ^( 'def' NAME id_list block_stat ) ;
func_call: NAME '(' arg_list ')' ';' -> ^( NAME arg_list ) ; 

class_def: ^ 'Class' NAME block_stat ;
dotted_expr: NAME ^ '.' ( NAME | func_call ) ;

id_list:  NAME ? |
          NAME ( ',' NAME )+ 
          -> ^($ID_LIST NAME * );

bool_expr: and_expr ( ^ 'or' and_expr ) * ;
and_expr: comp_expr ( ^ 'and' comp_expr ) * ; 
comp_expr: add_expr ( ^ cmp_op add_expr ) * ; 

add_expr: mult_expr ( ^ add_op mult_expr)* ; 
mult_expr: atom ( ^ mult_op atom)* ;
atom:   dotted_expr |
        func_call |
        NAME    | 
        INT     | 
        FLOAT   | 
        STRING  |
        'True'  |
        'False' |
        ('(' add_expr ')')      -> 
        
     ^( dotted_expr |
        func_call | 
        NAME    | 
        INT     | 
        FLOAT   | 
        STRING  | 
        'True'  | 
        'False  | 
        add_expr) ;

cmp_op: ^ ( '==' |  '>=' |  '<=' |  '>' |  '<' )      ;
add_op: ^ ( PLUS | MINUS );
mult_op: ^ ( STAR | FSLASH );