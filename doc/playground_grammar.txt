# Simple grammar for adding numbers and printing the results of adding numbers

# A grammar for doing simple math
# Can do addition and mutliplication
# Can assign value of math expressions to variables
# Can print the result of an expression or variable

program: statements ;

statemnts: statment * ; 

statement:  print_stat  | 
            assign_stat | 
            expr_stat   |
            block_stat
            ; 

print_stat: 'print' LPAREN bool_expr RPAREN SEMI_COLON ;
assign_stat: NAME ASSIGN bool_expr SEMI_COLON ; 
expr_stat: bool_expr SEMI_COLON ;
block_stat: '{' statements '}' ;

bool_expr: and_expr (  'or' and_expr ) * ;
and_expr: comp_expr ( 'and' comp_expr ) * ; 
comp_expr: add_expr ( cmp_op add_expr ) ? ; 
 
add_expr: mult_expr (add_op mult_expr)* ; 
mult_expr: atom (mult_op atom)* ;
atom: NAME | INT | FLOAT | 'True' | 'False' | (LPAREN add_expr RPAREN) ;

add_op: PLUS | MINUS ;
mult_op: STAR | FSLASH ;
cmp_op: ( '==' |  '>=' |  '<=' |  '>' |  '<' )      ;

TRUE: 'True'
FALSE: 'False'
PLUS: '+' ;
MINUS: '-' ;
STAR: '*' ; 
FSLASH: '/' ; 
SEMI_COLON: ';' ; 
EQUAL: '=' ;
LPAREN: '(' ;
RPAREN: ')' ;  
DOT: '.' ;
INT: ('0' .. '9')+ ; 
FLOAT: ('0' .. '9')+ ('.' ('0' .. '9')+)? ; 
NAME : ('a'..'z' |'A'..'Z')+ ;